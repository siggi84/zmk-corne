/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define TAPPING_TERM 200
#define SHIFT_TAP    150
#define QUICK_TAP    0

#define DEFAULT 0
#define MIRYOKU 1
#define LOWER   2
#define RAISE   3
#define ADJUST  4
#define FN      5
#define ICE     6
#define MIR_NAV 7
#define MIR_NUM 8
#define MIR_SYM 9

#define IS_ODIA MINUS
#define IS_MINUS EQUAL
#define IS_ETH LBKT
#define IS_SQT RBKT
#define IS_AT RA(Q)
#define IS_FSLH LS(N7)
#define IS_UNDER LS(EQUAL)
#define IS_LPAR LS(N8)
#define IS_RPAR LS(N9)
#define IS_LBRC RA(N0)
#define IS_RBRC RA(N7)
#define IS_GT LS(NUBS)
#define IS_LT NUBS
#define IS_LBKT RA(N8)
#define IS_RBKT RA(N9)
#define IS_PIPE RA(NUBS)
#define IS_BSLH RA(MINUS)
#define IS_MICR RA(M)
#define IS_EURO RA(E)
#define IS_EQUAL LS(N0)
#define IS_MULTIPLY LS(NUHS)
#define IS_PLUS NUHS
#define IS_GRAVE RA(NUHS)
#define IS_AMPS LS(N6)
#define IS_TILDE RA(SQT)


/ {
    behaviors {
        isslqu: is_slsh_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "IS_FSLH_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp IS_FSLH>, <&kp LS(RBRC)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        isqudq: is_quot_dquo {
            compatible = "zmk,behavior-mod-morph";
            label = "IS_QUOT_DQUO";
            #binding-cells = <0>;
            bindings = <&kp IS_SQT>, <&kp RS(N2)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_a: acute_a {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_A";
            #binding-cells = <0>;
            bindings = <&acute_letter A>, <&acute_letter_cap A>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_e: acute_e {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_E";
            #binding-cells = <0>;
            bindings = <&acute_letter E>, <&acute_letter_cap E>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_i: acute_i {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_I";
            #binding-cells = <0>;
            bindings = <&acute_letter I>, <&acute_letter_cap I>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_o: acute_o {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_O";
            #binding-cells = <0>;
            bindings = <&acute_letter O>, <&acute_letter_cap O>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_u: acute_u {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_U";
            #binding-cells = <0>;
            bindings = <&acute_letter U>, <&acute_letter_cap U>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_y: acute_y {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_Y";
            #binding-cells = <0>;
            bindings = <&acute_letter Y>, <&acute_letter_cap Y>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP>;
            bindings = <&kp>, <&kp>;
            /* hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;    // <---[[right-hand keys]] */
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP>;
            bindings = <&kp>, <&kp>;
            /* hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;    // <---[[left-hand keys]] */
        };

        hmls: homerow_mods_left_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <SHIFT_TAP>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP>;
            bindings = <&kp>, <&kp>;
            /* hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;    // <---[[right-hand keys]] */
        };

        hmrs: homerow_mods_right_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_SHIFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <SHIFT_TAP>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP>;
            bindings = <&kp>, <&kp>;
            // <---[[left-hand keys]];    hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>
        };

        lmr: layer_mods_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MODS_REPEAT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        lmb: layer_mods_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MODS_BALANCED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

    };

    macros {
            acute_letter: acute_letter {
            label = "ACUTE_LETTER_MACRO";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings
                = <&kp SQT>
                , <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>;
        };

            acute_letter_cap: acute_letter_cap {
            label = "ACUTE_LETTER_MACRO_CAPITAL";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings
                = <&kp SQT>
                , <&macro_param_1to1>, <&kp LS(MACRO_PLACEHOLDER)>;
        };

            dl: dead_letter {
            label = "DEAD_LETTER_MACRO";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings
                = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>
                , <&kp SPACE>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 13>;
            bindings = <&kp TAB>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp RA(N9)>;
        };

        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp RA(N8)>;
        };
        combo_grv {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RA(NUHS)>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB       &kp Q       &kp W       &kp F        &kp P          &kp B            &kp J          &kp L        &kp U          &kp Y        &isqudq     &kp DEL
   &trans        &hml LGUI A &hml LALT R &hml LCTRL S &hmls LSHFT T  &kp G            &kp M          &hmrs RSHFT N &hmr RCTRL E   &hmr LALT I  &hmr LGUI O &kp SQT
   &tog MIRYOKU  &kp Z       &hml RALT X &kp C        &kp D          &kp V            &kp K          &kp H        &hmr RALT COMMA &kp DOT      &isslqu     &trans
                                         &trans       &lt ICE ESC    &lmb LOWER SPACE &lmb RAISE RET &lmr FN BSPC &trans
                        >;
                };

                miryoku_base {
                        bindings = <
   &none  &kp Q       &kp W       &kp F        &kp P              &kp B            &kp J          &kp L         &kp U          &kp Y        &isqudq      &none
   &none  &hml LGUI A &hml LALT R &hml LCTRL S &hmls LSHFT T      &kp G            &kp M          &hmrs RSHFT N &hmr RCTRL E   &hmr LALT I  &hmr LGUI O &none
   &trans &kp Z       &hml RALT X &kp C        &kp D              &kp V            &kp K          &kp H         &hmr RALT COMMA &kp DOT     &isslqu     &none
                                  &kp ESC      &lmb MIR_NAV SPACE &kp TAB          &lmb MIR_SYM RET &lmr MIR_NUM BSPC  &lmr FN DEL
                        >;
                };

                lower_layer {
                        bindings = <
   &trans   &kp N1       &kp N2          &kp N3         &kp N4       &kp N5         &kp N6       &kp N7        &kp N8       &kp N9      &kp N0          &trans
   &trans   &kp EXCL     &kp IS_AT       &kp HASH       &kp DLLR     &kp PRCNT      &kp IS_FSLH  &kp IS_UNDER  &kp IS_MINUS &kp IS_LPAR &kp IS_RPAR     &trans
   &trans   &trans       &kp IS_MICR     &kp RA(GRAVE)  &kp IS_EURO  &trans         &kp IS_EQUAL &kp IS_PLUS   &trans       &trans      &kp IS_MULTIPLY &trans
                                         &kp ESC        &kp SPACE    &kp TAB        &kp ENTER    &kp BSPC      &lmr FN BSPC
                        >;
                };

                raise_layer {
                        bindings = <
   &trans  &kp IS_LBRC  &kp IS_GT    &kp IS_RBKT     &kp IS_RPAR      &kp IS_PIPE       &kp C_PREV  &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_PLAY &trans
   &trans  &kp IS_RBRC  &kp IS_LT    &kp IS_LBKT     &kp IS_LPAR      &kp IS_BSLH       &kp LEFT    &kp DOWN     &kp UP       &kp RIGHT  &kp CAPS   &trans
   &trans  &kp IS_GRAVE &kp IS_AMPS  &dl RA(SQT)     &kp RA(RBKT)     &trans            &kp HOME    &kp PG_DN    &kp PG_UP    &kp END    &kp INS    &trans
                                     &trans          &trans           &trans            &trans      &trans       &trans
                        >;
                };
                adjust_layer {
                        bindings = <
   &trans     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4 &trans     &bt BT_CLR &bt BT_NXT &bt BT_PRV &trans     &trans
   &trans     &kp A         &kp R         &kp S         &kp T         &trans       &trans     &kp N      &kp E      &kp I      &kp O      &trans
   &trans     &trans        &kp X         &trans        &trans        &trans       &trans     &trans     &trans     &kp COMMA  &trans     &trans
                                          &trans        &trans        &trans       &trans     &trans     &trans
                        >;
                };

                fn_layer {
                        bindings = <
   &trans     &kp F12     &kp F7     &kp F8     &kp F9     &kp PSCRN        &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp F11     &kp F4     &kp F5     &kp F6     &kp SLCK         &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp F10     &kp F1     &kp F2     &kp F3     &kp PAUSE_BREAK  &trans     &trans     &trans     &trans     &trans     &trans
                                     &trans     &trans     &trans           &trans     &trans     &trans
                        >;
                };

                ice_layer {
                        bindings = <
   &trans     &trans     &trans     &trans     &trans     &trans        &trans     &kp SLASH  &acute_u   &acute_y  &kp IS_ODIA     &trans
   &trans     &trans     &trans     &trans     &trans     &trans        &trans     &kp IS_ETH &acute_e   &acute_i  &acute_o        &trans
   &trans     &trans     &trans     &trans     &trans     &trans        &trans     &trans     &kp SEMI   &acute_a  &trans          &trans
                                    &trans     &trans     &trans        &trans     &kp DEL    &trans
                        >;
                };

                miryoku_nav {
                        bindings = <
   &trans     &trans     &trans     &trans     &trans     &trans        &trans     &trans       &trans       &trans     &trans     &trans
   &trans     &trans     &trans     &trans     &trans     &trans        &kp LEFT   &kp DOWN     &kp UP       &kp RIGHT  &kp CAPS   &trans
   &trans     &trans     &trans     &trans     &trans     &trans        &kp HOME   &kp PG_DN    &kp PG_UP    &kp END    &kp INS    &trans
                                    &trans     &trans     &trans        &kp ENTER  &kp BSPC     &kp DEL
                        >;
                };

                miryoku_num {
                        bindings = <
   &trans     &kp IS_LBKT  &kp N7     &kp N8     &kp N9     &kp IS_RBKT      &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp IS_EQUAL &kp N4     &kp N5     &kp N6     &kp SEMI         &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp IS_BSLH  &kp N1     &kp N2     &kp N3     &kp IS_GRAVE     &trans     &trans     &trans     &trans     &trans     &trans
                                      &kp DOT    &kp N0     &kp MINUS        &trans     &trans     &trans
                        >;
                };

                miryoku_sym {
                        bindings = <
   &trans     &kp IS_LBRC  &kp IS_AMPS &kp IS_MULTIPLY  &kp IS_LPAR     &kp IS_RBRC      &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp COLON    &kp DLLR    &kp PERCENT      &kp dl RA(SQT)  &kp IS_PLUS      &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp IS_TILDE &kp EXCL    &kp IS_A   T     &kp HASH        &kp IS_PIPE      &trans     &trans     &trans     &trans     &trans     &trans
                                       &kp IS_LPAR    &kp IS_RPAR     &kp IS_UNDER     &trans     &trans     &trans
                        >;
                };

        };
};


