/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define FN      4
#define ICE     5

/ {
    behaviors {
        isslqu: is_slsh_ques {
            compatible = "zmk,behavior-mod-morph";
            label = "IS_SLASH_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp LS(N7)>, <&kp LS(RBRC)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        isqudq: is_quot_dquo {
            compatible = "zmk,behavior-mod-morph";
            label = "IS_QUOT_DQUO";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp RS(N2)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_a: acute_a {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_A";
            #binding-cells = <0>;
            bindings = <&acute_letter A>, <&acute_letter_cap A>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        acute_e: acute_e {
            compatible = "zmk,behavior-mod-morph";
            label = "ACUTE_E";
            #binding-cells = <0>;
            bindings = <&acute_letter E>, <&acute_letter_cap E>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        lmr: layer_mods_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MODS_REPEAT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        lmb: layer_mods_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_MODS_BALANCED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

    };

    macros {
            acute_letter: acute_letter {
            label = "ACUTE_LETTER_MACRO";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings
                = <&kp SQT>
                , <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>;
        };

            acute_letter_cap: acute_letter_cap {
            label = "ACUTE_LETTER_MACRO_CAPITAL";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings
                = <&kp SQT>
                , <&macro_param_1to1>, <&kp LS(MACRO_PLACEHOLDER)>;
        };

            dl: dead_letter {
            label = "DEAD_LETTER_MACRO";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            bindings
                = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>
                , <&kp SPACE>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 13>;
            bindings = <&kp TAB>;
        };
        combo_rbrc {
            timeout-ms = <50>;
            key-positions = <7 19>;
            bindings = <&kp RA(N9)>;
        };

        combo_lbrc {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&kp RA(N8)>;
        };
        combo_grv {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RA(NUHS)>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB    &kp Q      &kp W      &kp F       &kp P           &kp B           &kp J         &kp L        &kp U          &kp Y        &isqudq     &kp DEL
   &bt BT_CLR     &hm LGUI A &hm LALT R &hm LCTRL S &hm LSHFT T     &kp G           &kp M         &hm RSHFT N  &hm RCTRL E    &hm LALT I   &hm LGUI O  &bt BT_SEL 1
   &bt BT_SEL 0     &kp Z      &hm RALT X &kp C       &kp D           &kp V           &kp K         &kp H        &hm RALT COMMA &kp DOT      &isslqu     &acute_a
                                    &trans      &lt ICE ESC     &lmb LOWER SPACE &lmb RAISE RET &lmr FN BSPC &trans
                        >;
                };
                lower_layer {
                        bindings = <
   &trans   &kp N1       &kp N2          &kp N3         &kp N4       &kp N5         &kp N6      &kp N7        &kp N8    &kp N9     &kp N0       &trans
   &trans   &kp RS(N1)   &kp RA(Q)       &kp RS(N3)     &kp RS(N4)   &kp RS(N5)     &kp LS(N7)  &kp LS(EQUAL) &kp EQUAL &kp LS(N8) &kp LS(N9)   &trans
   &trans   &trans       &kp RA(M)       &kp RA(GRAVE)  &kp RA(E)    &trans         &kp LS(N0)  &kp NUHS      &trans    &trans     &kp LS(NUHS) &trans
                                         &trans     &trans       &trans      &trans  &trans   &trans
                        >;
                };

                raise_layer {
                        bindings = <
   &trans  &kp RA(N0)   &kp LS(NUBS)    &kp RA(N9)     &kp LS(N9)      &kp RA(NUBS)       &kp C_PREV  &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT &kp C_PLAY &trans
   &trans  &kp RA(N7)   &kp NUBS        &kp RA(N8)     &kp LS(N8)      &kp RA(MINUS)      &kp LEFT    &kp DOWN     &kp UP       &kp RIGHT  &kp CAPS   &trans
   &trans  &kp RA(NUHS) &kp LS(N6)      &dl RA(SQT)    &kp RA(RBRC)    &trans             &kp HOME    &kp PG_DN    &kp PG_UP    &kp END    &kp INS    &trans
                             &trans  &trans   &trans   &trans   &trans    &trans
                        >;
                };
                adjust_layer {
                        bindings = <
   &trans     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4 &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &trans        &trans        &trans        &trans        &trans       &trans     &bt BT_CLR &bt BT_NXT &bt BT_PRV &trans     &trans
   &trans     &trans        &trans        &trans        &trans        &trans       &trans     &trans     &trans     &trans     &trans     &trans
                                          &trans        &trans        &trans       &trans     &trans     &trans
                        >;
                };

                fn_layer {
                        bindings = <
   &trans     &kp F12     &kp F7     &kp F8     &kp F9     &kp PSCRN        &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp F11     &kp F4     &kp F5     &kp F6     &kp SLCK         &trans     &trans     &trans     &trans     &trans     &trans
   &trans     &kp F10     &kp F1     &kp F2     &kp F3     &kp PAUSE_BREAK  &trans     &trans     &trans     &trans     &trans     &trans
                             &trans  &trans   &trans   &trans   &trans    &trans
                        >;
                };

                ice_layer {
                        bindings = <
   &trans     &trans     &trans     &trans     &trans     &trans        &trans     &kp SLASH  &acute_letter U  &acute_letter Y  &kp MINUS       &trans
   &trans     &trans     &trans     &trans     &trans     &trans        &trans     &kp LBKT   &acute_e  &acute_letter I  &acute_letter O &trans
   &trans     &trans     &trans     &trans     &trans     &trans        &trans     &trans     &kp SEMI         &acute_a  &trans          &trans
                             &trans  &trans   &trans   &trans   &trans    &trans
                        >;
                };
        };
};


